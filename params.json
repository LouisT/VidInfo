{"name":"Vidinfo","tagline":"Get video information from different APIs.","body":"VidInfo (v0.1.9)\r\n======\r\n\r\nInstall: npm install vidinfo\r\n\r\nThis project is [Unlicensed](http://unlicense.org/ \"Title\").\r\nIn other words, I don't care what you do with it.\r\nHowever, if you make something interesting, I would like to check it out.\r\n\r\nCurrent APIs supported:\r\n------\r\n   Supported Formats: JSON, CSV, INI -- XML via [YQL](http://developer.yahoo.com/yql/console/ \"Title\").\r\n\r\n   [dailymotion.com](http://www.dailymotion.com/ \"Title\")\r\n   [bambuser.com (1)](http://bambuser.com/api/ \"Title\")\r\n   [on.aol.com](http://on.aol.com/ \"Title\")\r\n   [vimeo.com](http://vimeo.com/ \"Title\")\r\n   [youtube.com](http://www.youtube.com/ \"Title\")\r\n   [justin.tv (2)](http://www.justin.tv/ \"Title\")\r\n   [twitch.tv (2)](http://www.twitch.tv/ \"Title\") \r\n   [ustream.tv (2)](http://www.ustream.tv/ \"Title\")\r\n   [giantbomb.com (1,2)](http://www.giantbomb.com/api/ \"Title\")\r\n   [videolog.tv](http://videolog.tv/ \"Title\")\r\n   [mag.ma](http://mag.ma/ \"Title\")\r\n   [webcams.travel (1)](http://www.webcams.travel/developers/ \"Title\")\r\n   [archive.org](http://archive.org/ \"Title\")\r\n   [imdb.com (2,3)](http://imdb.com/ \"Title\")\r\n   [themoviedb.org (1)](http://www.themoviedb.org/documentation/api \"Title\")\r\n   [vzaar.com](http://vzaar.com/ \"Title\")\r\n   [wistia.com (4)](http://wistia.com/doc/developers \"Title\")\r\n   [flickr.com (1)](http://www.flickr.com/services/api/ \"Title\")\r\n\r\n    1) API key required. See \"bambuser\" example at the bottom.\r\n    2) This method is BETA.\r\n    3) 3rd party API. See \"3rd pary APIs\" below.\r\n    4) Requires basic auth (username:password). See \"wista\" example at the bottom.\r\n\r\nExperimental APIs: \r\n------\r\n   [livevideo.com (1)](http://www.livevideo.com/api/ \"Title\")\r\n   [muzu.tv (1)](http://www.muzu.tv/api/ \"Title\")\r\n   [traileraddict.com](http://www.traileraddict.com/ \"Title\")\r\n  \r\n    1) API key required. See \"bambuser\" example at the bottom.\r\n\r\nNOTE: These use [YQL](http://developer.yahoo.com/yql/console/ \"Title\") to convert XML to JSON.\r\n\r\n3rd party APIs:\r\n------\r\n    IMDB - http://imdbapi.org/\r\n\r\nNOTE: Not directly supported by the original content owners.\r\n\r\nTODO:\r\n------\r\n    1) Find more API's to use. -- Please suggest some.\r\n    2) Create tests.\r\n    3) Improve basic auth and API key support.\r\n    4) Clean up code and find a use for \"detectAll\".\r\n\r\n    *) Support events? I'm not sure about this yet.\r\n    **) Support XML API's maybe? -- I dislike XML.\r\n\r\nOptions:\r\n------\r\n    apikey - The API key, when needed.\r\n    basicauth - Your basic auth `username:password`, when needed.\r\n    formatter - The formatter to use on your JSON data. See ./examples/apis.js\r\n\r\nSettings:\r\n------\r\n    format - Use the formatter, true or false.\r\n   \r\nSettings usage:\r\n------\r\n    var VidInfo = require('vidinfo')({format:true});\r\n\r\nShortcuts:\r\n------\r\n    YouTube.com:                yt, youtube, youtubecom\r\n    Justin.tv (stream):         jtvs, jstream, justintvstream\r\n    Justin.tv (video clip):     jtvc, jclip, justintvclip\r\n    Bambuser.com:               bam, bambuser, bambusercom\r\n    Dailymotion.com:            dmo, dailymo, dailymotion, dailymotioncom\r\n    Vimeo.com:                  vimeo, vimeocom\r\n    Twitch.tv (stream):         ttvs, tstream, twitchtvstream\r\n    Twitch.tv (video clip):     ttvc, tclip, twitchtvclip\r\n    Ustream.tv (stream):        utvs, ustream, ustreamtvstream\r\n    Ustream.tv (video clip):    utvc, uclip, ustreamtvclip\r\n    on.aol.com:                 onaol, onaolcom\r\n    GiantBomb.com:              gbomb, giantbomb, giantbombcom\r\n    Videolog.tv:                vlog, videolog, videologtv\r\n    Mag.ma:                     mag, magma\r\n    Livevideo.com*:             lvid, lvideo, livevideo, livevideocom\r\n    Muzu.tv*:                   muzu, muzutv\r\n    Traileraddict.com*:         tadd, taddict, traileraddict, traileraddictcom\r\n    Webcams.travel:             wct, webtra, wtravel, webcamstravel\r\n    Archive.org:                arch, archive, archiveorg\r\n    IMDB.com:                   imdb, imdbapiorg\r\n    Themoviedb.org:             tdb, tmdb, themoviedborg\r\n    Vzaar.com:                  vzaar, vzaarcom\r\n    Wistia.com:                 wistia, wistacom\r\n    Flickr.com:                 flickr, flickrcom\r\n\r\n    *  See \"Experimental APIs\" above.\r\n\r\n    Examples:\r\n        VidInfo.youtube('ZRAr354usf8',console.log);\r\n        VidInfo.yt('ZRAr354usf8',console.log); // YouTube\r\n        VidInfo.dmo('xycczk',console.log); // Dailymotion\r\n\r\nFunctions:\r\n------\r\n    VidInfo.detect(url[,callback[,options]]) - Parse a URL and create an object used for 'byurl'.\r\n         See ./examples/detect.js\r\n\r\n    VidInfo.detectAll(string[,callback[,options]]) - Parse a string and return an object with all the IDs.\r\n         Options: keys - The list of keys for APIs that might need them.\r\n                  Example: {keys:{bambuser:'EXAMPLE-KEY',themoviedb:'ANOTHER-KEY'}}\r\n         See ./examples/detectAll.js\r\n\r\n    VidInfo.byid(id,api,callback[,options]) - Connects to the (should be) correct API for video information.\r\n         See ./examples/byid.js\r\n\r\n    VidInfo.byurl(url,callback[,options]) - Connects to the (should be) correct API for video information.\r\n         See ./examples/byurl.js\r\n\r\n    VidInfo.<apiname>(id,callback[,options]) -- Shortcut for 'byid'.\r\n         See ./examples/byapi.js\r\n\r\nExample Usage - Look in \"examples\" folder for more examples.\r\n-------\r\n```javascript\r\nvar VidInfo = require('vidinfo')({format:true});\r\n\r\n// YouTube -- Only return the title and published date, using 'formatter'.\r\nVidInfo.byurl('http://www.youtube.com/watch?v=ZRAr354usf8',console.log,{formatter: function (data,cb) {\r\n       var ret = {};\r\n       if ('$t' in data.entry.title) {\r\n          ret.title = data.entry.title.$t;\r\n          if ('$t' in data.entry.published) {\r\n             ret.published = new Date(Date.parse(data.entry.published.$t));\r\n          }\r\n       };\r\n       cb(ret);\r\n}});\r\n  \r\n// YouTube by video ID.\r\nVidInfo.byid('ZRAr354usf8','youtube',console.log,{formatter: function (data,cb) {\r\n       var ret = {};\r\n       if ('$t' in data.entry.title) {\r\n          ret.title = data.entry.title.$t;\r\n          if ('$t' in data.entry.published) {\r\n             ret.published = new Date(Date.parse(data.entry.published.$t));\r\n          }\r\n       };\r\n       cb(ret);\r\n}});\r\n   \r\n// 'byid' shortcut.\r\nVidInfo.vimeo('61969130',console.log);\r\nVidInfo.youtube('ZRAr354usf8',console.log);\r\nVidInfo.yt('ZRAr354usf8',console.log); // YouTube\r\n\r\n// Bambuser (API Key required)\r\nVidInfo.byurl('http://bambuser.com/v/3453034',function (obj) {\r\n       console.log(obj);\r\n},{apikey:'APIKEY'});\r\n\r\n// Wista (Basic auth required)\r\nVidInfo.byurl('http://ltdev.wistia.com/medias/piywx9v8rr',function (obj,e) {\r\n   if (!e) {\r\n      console.log('(byapi) wista: '+JSON.stringify(obj)+'\\n\\n');\r\n    } else {\r\n      console.log('(byapi - ERROR) wista: '+JSON.stringify({error:true,message:obj})+'\\n\\n');\r\n   }\r\n},{basicauth:'USERNAME:PASSWORD'});\r\n\r\n// 'detect' example. -- Prints video ID and API link in an object.\r\nconsole.log(VidInfo.detect('http://www.youtube.com/watch?v=ZRAr354usf8'));\r\n\r\n// 'detectAll' example. Prints an object with multiple 'detect' objects.\r\nconsole.log(VidInfo.detectAll('http://www.youtube.com/watch?v=ZRAr354usf8 http://bambuser.com/v/3453034 http://ltdev.wistia.com/medias/piywx9v8rr http://flic.kr/p/e9964e'));\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}